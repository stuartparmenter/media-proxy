# Â© Copyright 2025 Stuart Parmenter
# SPDX-License-Identifier: MIT

[project]
name = "media-proxy"
version = "0.4.0"
description = "Media streaming server that converts video/image sources to DDP for LED displays"
requires-python = ">=3.12"
license = {text = "MIT"}
authors = [
    {name = "Stuart Parmenter"}
]
dependencies = [
    "aiohttp>=3.8,<4",
    "av>=15,<16",
    "bdfparser>=2,<3",
    "bbcode>=1.1,<2",
    "filetype>=1.2,<2",
    "numpy>=2,<3",
    "pillow>=10,<13",
    "imageio-ffmpeg>=0.6,<1",
    "psutil>=5,<8",
    "PyYAML>=6,<7",
    "yt-dlp[default,curl-cffi]>=2025.9,<2026",
    "uvloop>=0.21 ; platform_system!='Windows'",
]

[project.optional-dependencies]
dev = [
    "mypy>=1.13,<2",
    "pyright>=1.1,<2",
    "types-PyYAML>=6,<7",
    "ruff>=0.9,<1",
]

[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[tool.mypy]
# Package configuration
namespace_packages = true
explicit_package_bases = true

# Import discovery
files = ["src/"]
packages = ["src"]

[[tool.mypy.overrides]]
module = ["uvloop.*", "tomli.*", "yt_dlp.*", "bdfparser.*", "bbcode.*"]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "src.media.video"
# PyAV AvBlockingIOError check triggers false positive
disable_error_code = ["truthy-function"]

[tool.pyright]
include = ["src"]
exclude = ["src/server.py"]
pythonVersion = "3.10"
pythonPlatform = "All"

[tool.ruff]
# Target Python 3.10+
target-version = "py310"

# Source code location
src = ["src"]

# Line length to match common formatting standards
line-length = 120

# Exclude patterns
exclude = [
    ".git",
    ".venv",
    "__pycache__",
    "*.egg-info",
]

[tool.ruff.lint]
# Enable recommended rules plus additional categories
select = [
    "E",      # pycodestyle errors
    "F",      # pyflakes
    "W",      # pycodestyle warnings
    "I",      # isort (import sorting)
    "N",      # pep8-naming
    "UP",     # pyupgrade (modernize Python syntax)
    "B",      # flake8-bugbear (likely bugs)
    "C4",     # flake8-comprehensions
    "SIM",    # flake8-simplify
    "RUF",    # Ruff-specific rules
    "ASYNC",  # flake8-async
    "S",      # flake8-bandit (security)
    "PTH",    # flake8-use-pathlib
]

# Disable specific rules that might be too strict
ignore = [
    "E501",   # Line too long (handled by formatter)
    "S101",   # Use of assert (common in tests and validation)
    "S311",   # Random for crypto (not always applicable)
    "S104",   # Binding to 0.0.0.0 - expected for server applications
    "SIM102", # Nested if - sometimes clearer than combined
    "SIM116", # Dict lookup vs if-else - readability vs performance tradeoff
    "RUF046", # Unnecessary cast to int - false positives with math.ceil() and round()
]

# Allow autofix for all enabled rules
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
# Ignore security rules in test files if you add them later
# "tests/**/*.py" = ["S"]

[tool.ruff.lint.isort]
# Import sorting configuration
known-first-party = ["src"]
force-single-line = false
lines-after-imports = 2

[tool.ruff.format]
# Format configuration (Ruff as Black replacement)
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false  # Respect trailing commas - don't collapse multi-line structures with trailing commas
line-ending = "auto"
